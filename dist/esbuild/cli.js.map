{
  "version": 3,
  "sources": ["../../src/cli-shared.ts", "../../src/commands/SSVScannerCommand.ts", "../../src/lib/web3.provider.ts", "../../src/cli.ts"],
  "sourcesContent": ["import figlet from 'figlet';\nimport pkg from '../package.json';\nimport { ArgumentParser } from 'argparse';\n\nimport { SSVScannerCommand } from './commands/SSVScannerCommand';\n\nconst FigletMessage = async (message: string) => {\n  return new Promise(resolve => {\n    figlet(message, (error: any, output?: string) => {\n      if (error) {\n        return resolve('');\n      }\n      resolve(output);\n    });\n  })\n}\n\nexport default async function main(): Promise<any> {\n  const parser = new ArgumentParser();\n\n  parser.add_argument('-n', '--node-url', {\n    help: `The ETH1 node url.`,\n    required: true,\n    dest: 'nodeUrl'\n  });\n  parser.add_argument('-ca', '--ssv-contract-address', {\n    help:\n      'The SSV Contract address, used to find the latest cluster data snapshot. ' +\n      'Refer to https://docs.ssv.network/developers/smart-contracts',\n    required: true,\n    dest: 'contractAddress'\n  });\n  parser.add_argument('-oa', '--owner-address', {\n    help: \"The owner address regarding the cluster that you want to query\",\n    required: true,\n    dest: 'ownerAddress'\n  });\n  parser.add_argument('-oids', '--operator-ids', {\n    help: `Comma-separated list of operators IDs regarding the cluster that you want to query`,\n    required: true,\n    dest: 'operatorIds'\n  });\n\n\n  const messageText = `Cluster Scanner v${pkg.version}`;\n  const message = await FigletMessage(messageText);\n  if (message) {\n    console.log(' -----------------------------------------------------------------------------------');\n    console.log(`${message || messageText}`);\n    console.log(' -----------------------------------------------------------------------------------');\n    for (const str of String(pkg.description).match(/.{1,75}/g) || []) {\n      console.log(` ${str}`);\n    }\n    console.log(' -----------------------------------------------------------------------------------\\n');\n  }\n\n  try {\n    let params = parser.parse_args();\n    params.operatorIds = params.operatorIds.split(',')\n      .map((value: any) => {\n        if (Number.isNaN(+value)) throw new Error('Operator Id should be the number');\n        return +value;\n      })\n      .sort((a: number, b: number) => a - b);\n\n    const command = new SSVScannerCommand(params);\n    const result = await command.execute();\n    console.table(result.payload);\n    console.log('\\Cluster snapshot:');\n    console.table(result.cluster);\n    console.log(JSON.stringify({\n      \"block\": result.payload.Block,\n      \"cluster snapshot\": result.cluster,\n      \"cluster\": Object.values(result.cluster)\n    }, null, '  '));\n  } catch (e: any) {\n    console.error('\\x1b[31m', e.message);\n  }\n}\n", "import cliProgress from 'cli-progress';\nimport Web3Provider from '../lib/web3.provider';\n\nexport interface SSVScannerParams {\n  nodeUrl: string,\n  ownerAddress: string,\n  contractAddress: string,\n  operatorIds: number[],\n}\n\nexport interface IData {\n  payload: any;\n  cluster: any;\n}\n\nexport class SSVScannerCommand {\n  protected DAY = 5400;\n  protected WEEK = this.DAY * 7;\n  protected MONTH = this.DAY * 30;\n  protected progressBar: any;\n\n  protected eventsList = [\n    'ClusterDeposited',\n    'ClusterWithdrawn',\n    'ValidatorRemoved',\n    'ValidatorAdded',\n    'ClusterLiquidated',\n    'ClusterReactivated',\n  ]\n\n  private params: SSVScannerParams;\n\n  constructor(scannerParams: SSVScannerParams) {\n    if (!scannerParams.contractAddress) {\n      throw Error('Contract address is required');\n    }\n    if (!scannerParams.nodeUrl) {\n      throw Error('ETH1 node is required');\n    }\n    const validOperatorIds = Array.isArray(scannerParams.operatorIds) && this.isValidOperatorIds(scannerParams.operatorIds.length);\n    if (!validOperatorIds) {\n      throw Error('Comma-separated list of operator IDs. The amount must be 3f+1 compatible.');\n    }\n    if (!scannerParams.ownerAddress) {\n      throw Error('Cluster owner address is required');\n    }\n    if (scannerParams.contractAddress.length !== 42) {\n      throw Error('Invalid contract address length.');\n    }\n    if (!scannerParams.contractAddress.startsWith('0x')) {\n      throw Error('Invalid contract address.');\n    }\n    if (scannerParams.ownerAddress.length !== 42) {\n      throw Error('Invalid owner address length.');\n    }\n    if (!scannerParams.ownerAddress.startsWith('0x')) {\n      throw Error('Invalid owner address.');\n    }\n    this.params = scannerParams;\n    // convert to checksum addresses\n    this.params.contractAddress = Web3Provider.web3().utils.toChecksumAddress(this.params.contractAddress);\n    this.params.ownerAddress = Web3Provider.web3().utils.toChecksumAddress(this.params.ownerAddress);\n    this.params.operatorIds = [...this.params.operatorIds].sort((a: number, b: number) => a - b);\n  }\n\n  async scan(): Promise<IData> {\n    return this.getClusterSnapshot(false);\n  }\n\n  async execute(): Promise<IData> {\n    console.log('\\nScanning blockchain...');\n    this.progressBar = new cliProgress.SingleBar({}, cliProgress.Presets.shades_classic);\n    const data: IData = await this.getClusterSnapshot(true);\n    this.progressBar.stop();\n    return data;\n  }\n\n  async getClusterSnapshot(cli: boolean): Promise<IData> {\n    let latestBlockNumber;\n    try {\n      latestBlockNumber = await Web3Provider.web3(this.params.nodeUrl).eth.getBlockNumber();\n    } catch (err) {\n      throw new Error('Could not access the provided node endpoint.');\n    }\n    try {\n      await Web3Provider.contract(this.params.nodeUrl, this.params.contractAddress).methods.owner().call();\n      // HERE we can validate the contract owner address\n    } catch (err) {\n      throw new Error('Could not find any cluster snapshot from the provided contract address.');\n    }\n    let step = this.MONTH;\n    let clusterSnapshot;\n    let biggestBlockNumber = 0;\n\n    const ownerTopic = Web3Provider.web3().eth.abi.encodeParameter('address', this.params.ownerAddress);\n    const filters = {\n      fromBlock: latestBlockNumber - step,\n      toBlock: latestBlockNumber,\n      topics: [null, ownerTopic],\n    };\n\n    cli && this.progressBar.start(latestBlockNumber, 0);\n    while (!clusterSnapshot && filters.fromBlock > 0) {\n      let result: any;\n      try {\n        result = await Web3Provider.contract(this.params.nodeUrl, this.params.contractAddress).getPastEvents('allEvents', filters);\n        result\n          .filter((item: any) => this.eventsList.includes(item.event))\n          .filter((item: any) => JSON.stringify(item.returnValues.operatorIds.map((value: any) => +value)) === JSON.stringify(this.params.operatorIds))\n          .forEach((item: any) => {\n            if (item.blockNumber > biggestBlockNumber) {\n              biggestBlockNumber = item.blockNumber;\n              clusterSnapshot = item.returnValues.cluster;\n            }\n          });\n        filters.toBlock = filters.fromBlock;\n      } catch (e) {\n        console.error(e);\n        if (step === this.MONTH) {\n          step = this.WEEK;\n        } else if (step === this.WEEK) {\n          step = this.DAY;\n        }\n      }\n      filters.fromBlock = filters.toBlock - step;\n      cli && this.progressBar.update(latestBlockNumber - (filters.toBlock - step));\n    }\n    cli && this.progressBar.update(latestBlockNumber, latestBlockNumber);\n\n    clusterSnapshot = clusterSnapshot || ['0', '0', '0', '0', true];\n    return {\n      payload: {\n        'Owner': this.params.ownerAddress,\n        'Operators': this.params.operatorIds.sort((a: number, b: number) => a - b).join(','),\n        'Block': biggestBlockNumber || latestBlockNumber,\n        'Data': clusterSnapshot.join(','),\n      },\n      cluster: {\n        validatorCount: clusterSnapshot[0],\n        networkFeeIndex: clusterSnapshot[1],\n        index: clusterSnapshot[2],\n        balance: clusterSnapshot[3],\n        active: clusterSnapshot[4],\n      }\n    };\n  }\n\n  private isValidOperatorIds(operatorsLength: number) {\n    return (operatorsLength < 4 || operatorsLength > 13 || operatorsLength % 3 != 1) ? false : true;\n  }\n}\n", "import Web3 from 'web3';\nimport ABI_V3 from '../shared/v3.abi.json';\n\nexport default class Web3Provider {\n  static BLOCK_RANGE_500K = 500000;\n\n  static web3(nodeUrl: string = '') {\n    return new Web3(nodeUrl);\n  }\n\n  static get abi() {\n    return ABI_V3 as any;\n  }\n\n  static contract(nodeUrl: string, contractAddress: string) {\n    return new (Web3Provider.web3(nodeUrl)).eth.Contract(\n      Web3Provider.abi,\n      contractAddress,\n    );\n  }\n}\n", "#!/usr/bin/env node\n'use strict';\nimport main from './cli-shared';\n\nvoid main();\n"],
  "mappings": "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",
  "names": ["import_figlet", "import_argparse", "import_cli_progress", "import_web3", "_Web3Provider", "nodeUrl", "Web3", "v3_abi_default", "contractAddress", "Web3Provider", "SSVScannerCommand", "scannerParams", "Web3Provider", "b", "__async", "cliProgress", "data", "cli", "latestBlockNumber", "err", "step", "clusterSnapshot", "biggestBlockNumber", "ownerTopic", "filters", "result", "item", "value", "e", "a", "operatorsLength", "FigletMessage", "message", "__async", "resolve", "figlet", "error", "output", "main", "parser", "messageText", "package_default", "str", "params", "value", "a", "b", "result", "SSVScannerCommand", "e", "main"]
}
